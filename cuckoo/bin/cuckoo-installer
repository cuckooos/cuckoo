#!/bin/sh
#
# A desktop-oriented virtual machines management system written in Shell.
#
# Code is available online at https://github.com/magenete/cuckoo
# See LICENSE for licensing information, and README for details.
#
# Copyright (C) 2016 Magenete Systems OÃœ.
#


CUCKOO_GIT_BRANCH="master"
CUCKOO_GIT_URL="https://github.com/magenete/cuckoo/archive/${CUCKOO_GIT_BRANCH}.tar.gz"

CUCKOO_ARCH_LIST="x86 x86_64"
CUCKOO_INSTALLER_DIR=".cuckoo/"
CUCKOO_DIR="${CUCKOO_INSTALLER_DIR}cuckoo-${CUCKOO_GIT_BRANCH}/cuckoo/"
CUCKOO_LIB_DIR="${CUCKOO_DIR}lib/"
CUCKOO_ISO_DIR="${CUCKOO_DIR}iso/"
CUCKOO_ETC_DIR="${CUCKOO_DIR}etc/"
CUCKOO_ETC_VERSION_FILE="${CUCKOO_ETC_DIR}VERSION"
CUCKOO_OS_DIR="${CUCKOO_DIR}os/"
CUCKOO_OS_COMMON_DIR="${CUCKOO_OS_DIR}common/"
CUCKOO_HD_DIR="${CUCKOO_DIR}hd/"
CUCKOO_BIN_DIR="${CUCKOO_DIR}bin/"
CUCKOO_BIN_FILE="${CUCKOO_BIN_DIR}cuckoo"

QEMU_ARCH_LIST="x86 x86_64"
QEMU_DIR="${CUCKOO_DIR}../qemu/"
QEMU_LIB_DIR="${QEMU_DIR}lib/"
QEMU_BIN_DIR="${QEMU_DIR}bin/"
QEMU_BUILD_DIR="${QEMU_DIR}build/"

HOME_SHELL_PROFILE_FILES=".bash_profile .bashrc .mkshrc .profile .zlogin .zshrc"


# Help message
help_message()
{
    cat << _H_E_L_P

Usage: $(basename $0) [argumets]

  -i, --install    Install Cuckoo (by default).
  -u, --uninstall  Uninstall Cuckoo.

  -v, --version    Print the current version.
  -h, --help       Show this message.

_H_E_L_P
}


# Print error message and exit
error_message()
{
    help_message

    echo ""
    echo "ERROR: $1"
    echo ""

    exit 1
}


# Cuckoo install
cuckoo_install()
{
    # Make project directory and download source from Git
    mkdir -p "${HOME}/${CUCKOO_INSTALLER_DIR}" && cd "${HOME}/${CUCKOO_INSTALLER_DIR}" && curl -SL "$CUCKOO_GIT_URL" | tar xz
    if [ $? -gt 0 ]
    then
        error_message "Could not create directory '${HOME}/${CUCKOO_INSTALLER_DIR}'"
    else
        curl -SL "$CUCKOO_GIT_URL" | tar xz
        if [ $? -gt 0 ]
        then
            error_message "Could not download file '$CUCKOO_GIT_URL'"
        fi
    fi

    if [ -e "${HOME}/${CUCKOO_BIN_FILE}" ] && [ -f "${HOME}/${CUCKOO_BIN_FILE}" ]
    then
        cuckoo_structure_install

        cuckoo_qemu_install

        cuckoo_add_bin_path
    else
        error_message "Bin file '${HOME}/${CUCKOO_BIN_FILE}' does not exist"
    fi
}


# Cuckoo structure install
cuckoo_structure_install()
{
    # Bin
    chmod 700 "${HOME}/${CUCKOO_INSTALLER_DIR}"
    chmod 700 "${HOME}/${CUCKOO_DIR}../"
    chmod 700 "${HOME}/${CUCKOO_DIR}"
    chmod 700 "${HOME}/${CUCKOO_BIN_DIR}"*
    chmod 600 "${HOME}/${CUCKOO_BIN_DIR}"*.bat

    # Etc
    chmod 700 "${HOME}/${CUCKOO_ETC_DIR}"
    chmod 700 "${HOME}/${CUCKOO_ETC_DIR}"*
    chmod 600 "${HOME}/${CUCKOO_ETC_VERSION_FILE}"

    # HD and ISO
    chmod 700 "${HOME}/${CUCKOO_ISO_DIR}"
    chmod 700 "${HOME}/${CUCKOO_ISO_DIR}"*

    chmod 700 "${HOME}/${CUCKOO_HD_DIR}"
    chmod 700 "${HOME}/${CUCKOO_HD_DIR}"*

    for cuckoo_arch in $CUCKOO_ARCH_LIST
    do
        chmod 700 "${HOME}/${CUCKOO_ISO_DIR}${cuckoo_arch}/"*
        chmod 700 "${HOME}/${CUCKOO_HD_DIR}${cuckoo_arch}/"*
    done

    # OS
    chmod 700 "${HOME}/${CUCKOO_OS_DIR}"
    chmod 700 "${HOME}/${CUCKOO_OS_DIR}"*
    chmod 700 "${HOME}/${CUCKOO_OS_COMMON_DIR}"*

    # Lib files
    chmod 600 "${HOME}/${CUCKOO_LIB_DIR}"*
}


# QEMU install
cuckoo_qemu_install()
{
    # Bin directory
    chmod 700 "${HOME}/${QEMU_BIN_DIR}"

    # Lib files
    chmod 700 "${HOME}/${QEMU_LIB_DIR}"
    chmod 600 "${HOME}/${QEMU_LIB_DIR}"*.sh

    # Build files
    chmod 700 "${HOME}/${QEMU_BUILD_DIR}"
    for qemu_arch in $QEMU_ARCH_LIST
    do
        chmod 700 "${HOME}/${QEMU_BUILD_DIR}${qemu_arch}/"*.sh
    done
}


# Add Cuckoo bin path in PATH
cuckoo_add_bin_path()
{
    for shell_profile_file in $HOME_SHELL_PROFILE_FILES
    do
        if [ -e "${HOME}/${shell_profile_file}" ] && [ -f "${HOME}/${shell_profile_file}" ]
        then
            echo "" >> "${HOME}/${shell_profile_file}"
            echo "export PATH=\"\${PATH}:\${HOME}/${CUCKOO_BIN_DIR}\"  # Add Cuckoo to PATH for scripting" >> "${HOME}/${shell_profile_file}"
        fi
    done

    # Export new PATH
    export PATH="${PATH}:${HOME}/${CUCKOO_BIN_DIR}"
}


# Answer for removing
cuckoo_uninstall_answer()
{
    printf "This will completely uninstall cuckoo. Continue? (y/N):"
    read uninstall_answer

    case $uninstall_answer in
        Y | y | Yes | yes )
            rm -rf "${HOME}/${CUCKOO_INSTALLER_DIR}"

            echo ""
            echo "Directory '${HOME}/${CUCKOO_INSTALLER_DIR}' has been removed"
            echo ""
            shift 1
        ;;
        "" | N | n | No | no )
            echo ""
            echo "Directory '${HOME}/${CUCKOO_INSTALLER_DIR}' has not been removed"
            echo ""
            shift 1
        ;;
        * )
            echo "Please use Y|y|Yes|yes|N|n|No|no or just enter (by default No)."

            cuckoo_uninstall_answer
            shift 1
        ;;
    esac
}


# Uninstall
cuckoo_uninstall()
{
    # Information about Cuckoo bin path removing in profile files
    echo ""
    echo "Please remove Cuckoo Bin path from PATH in the following files:"
    for shell_profile_file in $HOME_SHELL_PROFILE_FILES
    do
        if [ -e "${HOME}/${shell_profile_file}" ] && [ -f "${HOME}/${shell_profile_file}" ]
        then
            echo "    ${HOME}/${shell_profile_file}"
        fi
    done
    echo ""

    # Directory removing and answer getting
    if [ -e "${HOME}/${CUCKOO_INSTALLER_DIR}" ] && [ -d "${HOME}/${CUCKOO_INSTALLER_DIR}" ]
    then
        echo "Everything will be removed in '${HOME}/${CUCKOO_INSTALLER_DIR}'!"

        cuckoo_uninstall_answer
    else
        echo "Directory '${HOME}/${CUCKOO_INSTALLER_DIR}' does not exist"
        echo ""
    fi
}


# Installation run
if [ "$(whoami)" = "$USER" ] && [ "$(basename $HOME)" = "$USER" ]
then
    cuckoo_install
    cuckoo_uninstall
else
    error_message "Invalid ENV of current user '$USER'"
fi


##  Options definition
OPTS="$(getopt -o "iuvh" -l "install,uninstall,version,help" -a -- "$@" 2>/dev/null)"
if [ $? -gt 0 ]
then
    error_message "Invalid option(s) value"
fi

eval set -- "$OPTS"

# Options parsing
while [ $# -gt 0 ]
do
    case $1 in
    -- )
        shift 1
    ;;
    --install | -i )
        CUCKOO_ACTION="install"
        shift 1
    ;;
    --uninstall | -u )
        CUCKOO_ACTION="remove"
        shift 1
    ;;
    --version | -v )
        echo "Cuckoo version: $(cat "$(realpath "$(readlink -f "$(dirname "$0")")/..")/etc/VERSION")"
        exit 0
    ;;
    --help | -h )
        help_message
        exit 0
    ;;
    * )
        error_message "Invalid option '$1'"
    ;;
    esac
done

